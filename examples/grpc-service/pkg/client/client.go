// Code generated by GG version dev. DO NOT EDIT.

//go:build !gg
// +build !gg

package client

import (
	"context"
	server "github.com/555f/gg/examples/grpc-service/internal/server"
	dto "github.com/555f/gg/examples/grpc-service/pkg/dto"
	grpc "google.golang.org/grpc"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	"time"
)

type ProfileControllerClient struct {
	cc server.ProfileControllerClient
}

func (c *ProfileControllerClient) Create(token string, firstName string, lastName string, address string, old int, age time.Time, sleep time.Duration) (profile *dto.Profile, err error) {
	resp, err := c.cc.Create(context.TODO(), &server.CreateRequest{Token: token, FirstName: firstName, LastName: lastName, Address: address, Old: int64(old), Age: timestamppb.New(age), Sleep: durationpb.New(sleep)})
	profile = &dto.Profile{ID: int(resp.Profile.Id), FistName: resp.Profile.FistName, LastName: resp.Profile.LastName, Address: dto.Address{Street: resp.Profile.Address.Street, Apt: int(resp.Profile.Address.Apt), Apt2: int8(resp.Profile.Address.Apt2), Apt3: uint8(resp.Profile.Address.Apt3)}}
	if err != nil {
		return
	}
	return
}
func (c *ProfileControllerClient) Remove(id string) (err error) {
	_, err = c.cc.Remove(context.TODO(), &server.RemoveRequest{Id: id})
	if err != nil {
		return
	}
	return
}
func (c *ProfileControllerClient) Stream(profile chan *dto.Profile) (statistics chan *dto.Statistic, err error) {
	resp, err := c.cc.Stream(context.TODO())
	if err != nil {
		return
	}
	statistics = make(chan *dto.Statistic)
	go func() {
		defer close(statistics)
		for {
			data, err := resp.Recv()
			if err != nil {
				return
			}
			statistics <- &dto.Statistic{ProfileID: int(data.ProfileID), Sum: data.Sum, CreatedAt: data.CreatedAt.AsTime()}

			if data.ProfileID == 4 {
				return
			}
		}
	}()
	go func() {
		for data := range profile {
			err := resp.Send(&server.Profile{Id: int64(data.ID), FistName: data.FistName, LastName: data.LastName, Address: &server.Address{Street: data.Address.Street, Apt: int64(data.Address.Apt), Apt2: int32(data.Address.Apt2), Apt3: uint32(data.Address.Apt3)}})
			if err != nil {
				break
			}
		}
	}()
	return
}
func (c *ProfileControllerClient) Stream2(profile chan *dto.Profile) (err error) {
	resp, err := c.cc.Stream2(context.TODO())
	if err != nil {
		return
	}
	go func() {
		for data := range profile {
			err := resp.Send(&server.Profile{Id: int64(data.ID), FistName: data.FistName, LastName: data.LastName, Address: &server.Address{Street: data.Address.Street, Apt: int64(data.Address.Apt), Apt2: int32(data.Address.Apt2), Apt3: uint32(data.Address.Apt3)}})
			if err != nil {
				break
			}
		}
	}()
	return
}
func (c *ProfileControllerClient) Stream3(profile *dto.Profile) (statistics chan *dto.Statistic, err error) {
	resp, err := c.cc.Stream3(context.TODO(), &server.Stream3Request{Profile: &server.Profile{Id: int64(profile.ID), FistName: profile.FistName, LastName: profile.LastName, Address: &server.Address{Street: profile.Address.Street, Apt: int64(profile.Address.Apt), Apt2: int32(profile.Address.Apt2), Apt3: uint32(profile.Address.Apt3)}}})
	if err != nil {
		return
	}
	statistics = make(chan *dto.Statistic)
	go func() {
		defer close(statistics)
		for {
			data, err := resp.Recv()
			if err != nil {
				return
			}
			statistics <- &dto.Statistic{ProfileID: int(data.ProfileID), Sum: data.Sum, CreatedAt: data.CreatedAt.AsTime()}
		}
	}()
	return
}
func (c *ProfileControllerClient) Update(profile dto.Profile) (err error) {
	_, err = c.cc.Update(context.TODO(), &server.UpdateRequest{Profile: &server.Profile{Id: int64(profile.ID), FistName: profile.FistName, LastName: profile.LastName, Address: &server.Address{Street: profile.Address.Street, Apt: int64(profile.Address.Apt), Apt2: int32(profile.Address.Apt2), Apt3: uint32(profile.Address.Apt3)}}})
	if err != nil {
		return
	}
	return
}
func NewProfileControllerCient(cc grpc.ClientConnInterface) *ProfileControllerClient {
	return &ProfileControllerClient{cc: server.NewProfileControllerClient(cc)}
}
