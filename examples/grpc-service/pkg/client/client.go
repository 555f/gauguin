// Code generated by GG version dev. DO NOT EDIT.

package client

import (
	"context"
	server "github.com/555f/gg/examples/grpc-service/internal/server"
	controller "github.com/555f/gg/examples/grpc-service/internal/usecase/controller"
	dto "github.com/555f/gg/examples/grpc-service/pkg/dto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	"strconv"
	"time"
)

func toString(v any) string {
	switch t := v.(type) {
	case string:
		return t
	case int:
		return strconv.FormatInt(int64(t), 10)
	case int64:
		return strconv.FormatInt(t, 10)
	case float32:
		return strconv.FormatFloat(float64(t), 'f', 10, 32)
	case float64:
		return strconv.FormatFloat(t, 'f', 10, 64)
	}
	return ""
}
func convertStruct[A any, B any](a A, c func(A) B) (r B) {
	return c(a)
}
func convertStructs[A any, B any, IN []A](a IN, c func(A) B) (r []B) {
	for _, v := range a {
		r = append(r, convertStruct[A, B](v, c))
	}
	return
}

type Option func(*ProfileControllerClient)

func ProfileControllerBefore(before ...func(ctx context.Context) context.Context) Option {
	return func(o *ProfileControllerClient) {
		o.before = append(o.before, before...)
	}
}
func ProfileControllerAfter(after ...func(ctx context.Context)) Option {
	return func(o *ProfileControllerClient) {
		o.after = append(o.after, after...)
	}
}

type ProfileControllerClient struct {
	cc     server.ProfileControllerClient
	before []func(ctx context.Context) context.Context
	after  []func(ctx context.Context)
}

func (c *ProfileControllerClient) Create(ctx context.Context, token string, firstName string, lastName string, address string, old int, age time.Time, sleep time.Duration) (profile *dto.Profile, err error) {
	ctx = metadata.AppendToOutgoingContext(ctx, "TestMetaContextKey", toString(ctx.Value(controller.TestMetaContextKey)))
	for _, f := range c.before {
		ctx = f(ctx)
	}
	resp, err := c.cc.Create(ctx, &server.CreateRequest{Token: token, FirstName: firstName, LastName: lastName, Address: address, Old: int64(old), Age: timestamppb.New(age), Sleep: durationpb.New(sleep)})
	if err != nil {
		return
	}
	profile = &dto.Profile{ID: int(resp.Profile.Id), FistName: resp.Profile.FistName, LastName: resp.Profile.LastName, Address: dto.Address{Street: resp.Profile.Address.Street, Apt: int(resp.Profile.Address.Apt), Apt2: int8(resp.Profile.Address.Apt2), Apt3: uint8(resp.Profile.Address.Apt3)}}
	for _, f := range c.after {
		f(ctx)
	}
	return
}
func (c *ProfileControllerClient) Remove(id string) (err error) {
	ctx := context.TODO()
	ctx = metadata.AppendToOutgoingContext(ctx)
	for _, f := range c.before {
		ctx = f(ctx)
	}
	_, err = c.cc.Remove(ctx, &server.RemoveRequest{Id: id})
	if err != nil {
		return
	}
	for _, f := range c.after {
		f(ctx)
	}
	return
}
func (c *ProfileControllerClient) Stream(profile chan *dto.Profile) (statistics chan *dto.Statistic, err error) {
	ctx := context.TODO()
	ctx = metadata.AppendToOutgoingContext(ctx)
	for _, f := range c.before {
		ctx = f(ctx)
	}
	resp, err := c.cc.Stream(ctx)
	if err != nil {
		return
	}
	for _, f := range c.after {
		f(ctx)
	}
	statistics = make(chan *dto.Statistic)
	go func() {
		defer close(statistics)
		for {
			data, err := resp.Recv()
			if err != nil {
				return
			}
			statistics <- &dto.Statistic{ProfileID: int(data.ProfileID), Sum: data.Sum, CreatedAt: data.CreatedAt.AsTime()}
		}
	}()
	go func() {
		for data := range profile {
			err := resp.Send(&server.Profile{Id: int64(data.ID), FistName: data.FistName, LastName: data.LastName, Address: &server.Address{Street: data.Address.Street, Apt: int64(data.Address.Apt), Apt2: int32(data.Address.Apt2), Apt3: uint32(data.Address.Apt3)}})
			if err != nil {
				break
			}
		}
	}()
	return
}
func (c *ProfileControllerClient) Stream2(profile chan *dto.Profile) (err error) {
	ctx := context.TODO()
	ctx = metadata.AppendToOutgoingContext(ctx)
	for _, f := range c.before {
		ctx = f(ctx)
	}
	resp, err := c.cc.Stream2(ctx)
	if err != nil {
		return
	}
	for _, f := range c.after {
		f(ctx)
	}
	go func() {
		for data := range profile {
			err := resp.Send(&server.Profile{Id: int64(data.ID), FistName: data.FistName, LastName: data.LastName, Address: &server.Address{Street: data.Address.Street, Apt: int64(data.Address.Apt), Apt2: int32(data.Address.Apt2), Apt3: uint32(data.Address.Apt3)}})
			if err != nil {
				break
			}
		}
	}()
	return
}
func (c *ProfileControllerClient) Stream3(profile *dto.Profile) (statistics chan *dto.Statistic, err error) {
	ctx := context.TODO()
	ctx = metadata.AppendToOutgoingContext(ctx)
	for _, f := range c.before {
		ctx = f(ctx)
	}
	resp, err := c.cc.Stream3(ctx, &server.Stream3Request{Profile: &server.Profile{Id: int64(profile.ID), FistName: profile.FistName, LastName: profile.LastName, Address: &server.Address{Street: profile.Address.Street, Apt: int64(profile.Address.Apt), Apt2: int32(profile.Address.Apt2), Apt3: uint32(profile.Address.Apt3)}}})
	if err != nil {
		return
	}
	for _, f := range c.after {
		f(ctx)
	}
	statistics = make(chan *dto.Statistic)
	go func() {
		defer close(statistics)
		for {
			data, err := resp.Recv()
			if err != nil {
				return
			}
			statistics <- &dto.Statistic{ProfileID: int(data.ProfileID), Sum: data.Sum, CreatedAt: data.CreatedAt.AsTime()}
		}
	}()
	return
}
func (c *ProfileControllerClient) Update(profile dto.Profile) (err error) {
	ctx := context.TODO()
	ctx = metadata.AppendToOutgoingContext(ctx)
	for _, f := range c.before {
		ctx = f(ctx)
	}
	_, err = c.cc.Update(ctx, &server.UpdateRequest{Profile: &server.Profile{Id: int64(profile.ID), FistName: profile.FistName, LastName: profile.LastName, Address: &server.Address{Street: profile.Address.Street, Apt: int64(profile.Address.Apt), Apt2: int32(profile.Address.Apt2), Apt3: uint32(profile.Address.Apt3)}}})
	if err != nil {
		return
	}
	for _, f := range c.after {
		f(ctx)
	}
	return
}
func NewProfileControllerClient(cc grpc.ClientConnInterface) *ProfileControllerClient {
	return &ProfileControllerClient{cc: server.NewProfileControllerClient(cc)}
}
