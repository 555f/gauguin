// Code generated by GG version . DO NOT EDIT.

package logging

import (
	"context"
	middleware "github.com/555f/gg/examples/grpc-service/internal/middleware"
	controller "github.com/555f/gg/examples/grpc-service/internal/usecase/controller"
	dto "github.com/555f/gg/examples/grpc-service/pkg/dto"
	log "github.com/go-kit/log"
	level "github.com/go-kit/log/level"
	"time"
)

type errLevel interface {
	Level() string
}
type logError interface {
	LogError() error
}

func levelLogger(e errLevel, logger log.Logger) log.Logger {
	switch e.Level() {
	default:
		return level.Error(logger)
	case "debug":
		return level.Debug(logger)
	case "info":
		return level.Info(logger)
	case "warn":
		return level.Warn(logger)
	}
}

type ProfileControllerLoggingMiddleware struct {
	next   controller.ProfileController
	logger log.Logger
}

func (s *ProfileControllerLoggingMiddleware) Create(ctx context.Context, token string, firstName string, lastName string, address string, old int, age time.Time, sleep time.Duration) (profile *dto.Profile, err error) {
	defer func(now time.Time) {
		logger := log.WithPrefix(s.logger, "message", "call method - Create", "token", "token", token, "firstName", "firstName", firstName, "lastName", "lastName", lastName, "address", "address", address, "old", "old", old, "age", "age", age.String(), "sleep", "sleep", sleep.String())
		if err != nil {
			if e, ok := err.(errLevel); ok {
				logger = levelLogger(e, logger)
			} else {
				logger = level.Error(logger)
			}
			if e, ok := err.(logError); ok {
				logger = log.WithPrefix(logger, "err", e.LogError())
			} else {
				logger = log.WithPrefix(logger, "err", err)
			}
		} else {
			logger = level.Debug(logger)
		}
		_ = logger.Log("dur", time.Since(now))
	}(time.Now())
	profile, err = s.next.Create(ctx, token, firstName, lastName, address, old, age, sleep)
	return
}
func (s *ProfileControllerLoggingMiddleware) Remove(id string) (err error) {
	defer func(now time.Time) {
		logger := log.WithPrefix(s.logger, "message", "call method - Remove", "id", "id", id)
		if err != nil {
			if e, ok := err.(errLevel); ok {
				logger = levelLogger(e, logger)
			} else {
				logger = level.Error(logger)
			}
			if e, ok := err.(logError); ok {
				logger = log.WithPrefix(logger, "err", e.LogError())
			} else {
				logger = log.WithPrefix(logger, "err", err)
			}
		} else {
			logger = level.Debug(logger)
		}
		_ = logger.Log("dur", time.Since(now))
	}(time.Now())
	err = s.next.Remove(id)
	return
}
func (s *ProfileControllerLoggingMiddleware) Stream(profile chan *dto.Profile) (statistics chan *dto.Statistic, err error) {
	defer func(now time.Time) {
		logger := log.WithPrefix(s.logger, "message", "call method - Stream")
		if err != nil {
			if e, ok := err.(errLevel); ok {
				logger = levelLogger(e, logger)
			} else {
				logger = level.Error(logger)
			}
			if e, ok := err.(logError); ok {
				logger = log.WithPrefix(logger, "err", e.LogError())
			} else {
				logger = log.WithPrefix(logger, "err", err)
			}
		} else {
			logger = level.Debug(logger)
		}
		_ = logger.Log("dur", time.Since(now))
	}(time.Now())
	statistics, err = s.next.Stream(profile)
	return
}
func (s *ProfileControllerLoggingMiddleware) Stream2(profile chan *dto.Profile) (err error) {
	defer func(now time.Time) {
		logger := log.WithPrefix(s.logger, "message", "call method - Stream2")
		if err != nil {
			if e, ok := err.(errLevel); ok {
				logger = levelLogger(e, logger)
			} else {
				logger = level.Error(logger)
			}
			if e, ok := err.(logError); ok {
				logger = log.WithPrefix(logger, "err", e.LogError())
			} else {
				logger = log.WithPrefix(logger, "err", err)
			}
		} else {
			logger = level.Debug(logger)
		}
		_ = logger.Log("dur", time.Since(now))
	}(time.Now())
	err = s.next.Stream2(profile)
	return
}
func (s *ProfileControllerLoggingMiddleware) Stream3(profile *dto.Profile) (statistics chan *dto.Statistic, err error) {
	defer func(now time.Time) {
		logger := log.WithPrefix(s.logger, "message", "call method - Stream3")
		if err != nil {
			if e, ok := err.(errLevel); ok {
				logger = levelLogger(e, logger)
			} else {
				logger = level.Error(logger)
			}
			if e, ok := err.(logError); ok {
				logger = log.WithPrefix(logger, "err", e.LogError())
			} else {
				logger = log.WithPrefix(logger, "err", err)
			}
		} else {
			logger = level.Debug(logger)
		}
		_ = logger.Log("dur", time.Since(now))
	}(time.Now())
	statistics, err = s.next.Stream3(profile)
	return
}
func (s *ProfileControllerLoggingMiddleware) Update(profile dto.Profile) (err error) {
	defer func(now time.Time) {
		logger := log.WithPrefix(s.logger, "message", "call method - Update")
		if err != nil {
			if e, ok := err.(errLevel); ok {
				logger = levelLogger(e, logger)
			} else {
				logger = level.Error(logger)
			}
			if e, ok := err.(logError); ok {
				logger = log.WithPrefix(logger, "err", e.LogError())
			} else {
				logger = log.WithPrefix(logger, "err", err)
			}
		} else {
			logger = level.Debug(logger)
		}
		_ = logger.Log("dur", time.Since(now))
	}(time.Now())
	err = s.next.Update(profile)
	return
}
func LoggingProfileControllerMiddleware(logger log.Logger) middleware.ProfileControllerMiddleware {
	return func(next controller.ProfileController) controller.ProfileController {
		return &ProfileControllerLoggingMiddleware{
			logger: logger,
			next:   next,
		}
	}
}
