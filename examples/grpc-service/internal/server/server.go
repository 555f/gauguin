// Code generated by GG version dev. DO NOT EDIT.

package server

import (
	"context"
	controller "github.com/555f/gg/examples/grpc-service/internal/usecase/controller"
	dto "github.com/555f/gg/examples/grpc-service/pkg/dto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

func convertStruct[A any, B any](a A, c func(A) B) (r B) {
	return c(a)
}
func convertStructs[A any, B any, IN []A](a IN, c func(A) B) (r []B) {
	for _, v := range a {
		r = append(r, convertStruct[A, B](v, c))
	}
	return
}

type options struct {
	profileController       controller.ProfileController
	profileControllerBefore []func(ctx context.Context) context.Context
	profileControllerAfter  []func(ctx context.Context)
}
type Option func(*options)

func ProfileController(s controller.ProfileController) Option {
	return func(o *options) {
		o.profileController = s
	}
}
func ProfileControllerBefore(before ...func(ctx context.Context) context.Context) Option {
	return func(o *options) {
		o.profileControllerBefore = append(o.profileControllerBefore, before...)
	}
}
func ProfileControllerAfter(after ...func(ctx context.Context)) Option {
	return func(o *options) {
		o.profileControllerAfter = append(o.profileControllerAfter, after...)
	}
}

type routeProfileController struct {
	UnimplementedProfileControllerServer
	svc    controller.ProfileController
	before []func(ctx context.Context) context.Context
	after  []func(ctx context.Context)
}

func (r *routeProfileController) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if ok {
		if values := md.Get("TestMetaContextKey"); len(values) > 0 && values[0] != "" {
			ctx = context.WithValue(ctx, controller.TestMetaContextKey, values[0])
		}
	}
	for _, f := range r.before {
		ctx = f(ctx)
	}
	profile, err := r.svc.Create(ctx, req.Token, req.FirstName, req.LastName, req.Address, int(req.Old), req.Age.AsTime(), req.Sleep.AsDuration())
	if err != nil {
		return nil, err
	}
	for _, f := range r.after {
		f(ctx)
	}
	resp := &CreateResponse{Profile: &Profile{Id: int64(profile.ID), FistName: profile.FistName, LastName: profile.LastName, Address: &Address{Street: profile.Address.Street, Apt: int64(profile.Address.Apt), Apt2: int32(profile.Address.Apt2), Apt3: uint32(profile.Address.Apt3)}}}
	return resp, err
}
func (r *routeProfileController) Remove(ctx context.Context, req *RemoveRequest) (*emptypb.Empty, error) {
	for _, f := range r.before {
		ctx = f(ctx)
	}
	err := r.svc.Remove(req.Id)
	if err != nil {
		return nil, err
	}
	for _, f := range r.after {
		f(ctx)
	}
	return nil, err
}
func (r *routeProfileController) Stream(stream ProfileController_StreamServer) error {
	ctx := stream.Context()
	chIn := make(chan *dto.Profile)
	go func() {
		for {
			data, err := stream.Recv()
			if err != nil {
				return
			}
			chIn <- &dto.Profile{ID: int(data.Id), FistName: data.FistName, LastName: data.LastName, Address: dto.Address{Street: data.Address.Street, Apt: int(data.Address.Apt), Apt2: int8(data.Address.Apt2), Apt3: uint8(data.Address.Apt3)}}
		}
	}()
	for _, f := range r.before {
		ctx = f(ctx)
	}
	statistics, err := r.svc.Stream(chIn)
	if err != nil {
		return err
	}
	for _, f := range r.after {
		f(ctx)
	}
	for data := range statistics {
		stream.Send(&Statistic{ProfileID: int64(data.ProfileID), Sum: data.Sum, CreatedAt: timestamppb.New(data.CreatedAt)})
	}
	return err
}
func (r *routeProfileController) Stream2(stream ProfileController_Stream2Server) error {
	ctx := stream.Context()
	chIn := make(chan *dto.Profile)
	go func() {
		for {
			data, err := stream.Recv()
			if err != nil {
				return
			}
			chIn <- &dto.Profile{ID: int(data.Id), FistName: data.FistName, LastName: data.LastName, Address: dto.Address{Street: data.Address.Street, Apt: int(data.Address.Apt), Apt2: int8(data.Address.Apt2), Apt3: uint8(data.Address.Apt3)}}
		}
	}()
	for _, f := range r.before {
		ctx = f(ctx)
	}
	err := r.svc.Stream2(chIn)
	if err != nil {
		return err
	}
	for _, f := range r.after {
		f(ctx)
	}
	return err
}
func (r *routeProfileController) Stream3(req *Stream3Request, stream ProfileController_Stream3Server) error {
	ctx := stream.Context()
	for _, f := range r.before {
		ctx = f(ctx)
	}
	statistics, err := r.svc.Stream3(&dto.Profile{ID: int(req.Profile.Id), FistName: req.Profile.FistName, LastName: req.Profile.LastName, Address: dto.Address{Street: req.Profile.Address.Street, Apt: int(req.Profile.Address.Apt), Apt2: int8(req.Profile.Address.Apt2), Apt3: uint8(req.Profile.Address.Apt3)}})
	if err != nil {
		return err
	}
	for _, f := range r.after {
		f(ctx)
	}
	for data := range statistics {
		stream.Send(&Statistic{ProfileID: int64(data.ProfileID), Sum: data.Sum, CreatedAt: timestamppb.New(data.CreatedAt)})
	}
	return err
}
func (r *routeProfileController) Update(ctx context.Context, req *UpdateRequest) (*emptypb.Empty, error) {
	for _, f := range r.before {
		ctx = f(ctx)
	}
	err := r.svc.Update(dto.Profile{ID: int(req.Profile.Id), FistName: req.Profile.FistName, LastName: req.Profile.LastName, Address: dto.Address{Street: req.Profile.Address.Street, Apt: int(req.Profile.Address.Apt), Apt2: int8(req.Profile.Address.Apt2), Apt3: uint8(req.Profile.Address.Apt3)}})
	if err != nil {
		return nil, err
	}
	for _, f := range r.after {
		f(ctx)
	}
	return nil, err
}
func Register(srv *grpc.Server, opts ...Option) {
	o := &options{}
	for _, f := range opts {
		f(o)
	}
	if o.profileController != nil {
		RegisterProfileControllerServer(srv, &routeProfileController{svc: o.profileController, before: o.profileControllerBefore, after: o.profileControllerAfter})
	}
}
