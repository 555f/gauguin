// Code generated by GG version . DO NOT EDIT.

//go:build !gg

package server_test

import (
	"encoding/json"
	errors1 "errors"
	restservicechi "github.com/555f/gg/examples/rest-service-chi"
	controller "github.com/555f/gg/examples/rest-service-chi/internal/usecase/controller"
	errors "github.com/555f/gg/examples/rest-service-chi/pkg/errors"
	gostrings "github.com/555f/go-strings"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestProfileController_Create_200(t *testing.T) {
	var serverRequest struct {
		FirstName string
		LastName  string
		Address   string
		Zip       int
	}
	serverRequest.FirstName = "aut voluptates odit voluptates quia quod fugit sunt quaerat id."
	serverRequest.LastName = "quisquam aut est aut voluptas est quibusdam nemo eaque quibusdam."
	serverRequest.Address = "nemo et omnis dolorum aut aut ullam sint dicta soluta."
	serverRequest.Zip = 99450
	mockServer := http.NewServeMux()
	mockServer.Handle("/profiles", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var body struct {
			FirstName string `json:"firstName"`
			LastName  string `json:"lastName"`
			Address   string `json:"address"`
			Zip       int    `json:"zip"`
		}
		_ = json.NewDecoder(r.Body).Decode(&body)
		if body.FirstName != serverRequest.FirstName {
			t.Fatal("failed equal method (controller.ProfileController).Create firstName")
		}
		if body.LastName != serverRequest.LastName {
			t.Fatal("failed equal method (controller.ProfileController).Create lastName")
		}
		if body.Address != serverRequest.Address {
			t.Fatal("failed equal method (controller.ProfileController).Create address")
		}
		if body.Zip != serverRequest.Zip {
			t.Fatal("failed equal method (controller.ProfileController).Create zip")
		}
		w.WriteHeader(200)
		data, _ := json.Marshal(serverResponse)
		w.Write(data)
	}))
	server := httptest.NewServer(mockServer)
	client := restservicechi.NewProfileControllerClient(server.URL, controller.ClientTestOptionFactory("Create_200")...)
	profile, err := client.Create(serverRequest.FirstName, serverRequest.LastName, serverRequest.Address, serverRequest.Zip)
	if err != nil {
		t.Fatalf("%s: %s", "failed execute method (controller.ProfileController).Create", err)
	}
	if profile.FistName != serverResponse.FistName {
		t.Fatal("failed equal method (controller.ProfileController).Create FistName not equal")
	}
	if profile.LastName != serverResponse.LastName {
		t.Fatal("failed equal method (controller.ProfileController).Create LastName not equal")
	}
	if profile.Address.Street != serverResponse.Address.Street {
		t.Fatal("failed equal method (controller.ProfileController).Create Address.Street not equal")
	}
	if profile.Address.Apt != serverResponse.Address.Apt {
		t.Fatal("failed equal method (controller.ProfileController).Create Address.Apt not equal")
	}
}
func TestProfileController_Create_400(t *testing.T) {
	var serverRequest struct {
		FirstName string
		LastName  string
		Address   string
		Zip       int
	}
	serverRequest.FirstName = "et laboriosam assumenda qui voluptatum impedit et rerum id exercitationem."
	serverRequest.LastName = "deserunt reprehenderit quia laudantium non voluptatibus aspernatur magni magnam quos."
	serverRequest.Address = "at et consequuntur quidem ut sequi necessitatibus dignissimos culpa doloremque."
	serverRequest.Zip = 80643
	errorWrapper := errors.ErrorWrapper{Data: nil, ErrorText: "provident id quam ipsam voluptas est consequuntur quasi est ullam.", Code: "quaerat architecto enim eos neque nihil sit alias quis ut."}
	mockServer := http.NewServeMux()
	mockServer.Handle("/profiles", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var body struct {
			FirstName string `json:"firstName"`
			LastName  string `json:"lastName"`
			Address   string `json:"address"`
			Zip       int    `json:"zip"`
		}
		_ = json.NewDecoder(r.Body).Decode(&body)
		if body.FirstName != serverRequest.FirstName {
			t.Fatal("failed equal method (controller.ProfileController).Create firstName")
		}
		if body.LastName != serverRequest.LastName {
			t.Fatal("failed equal method (controller.ProfileController).Create lastName")
		}
		if body.Address != serverRequest.Address {
			t.Fatal("failed equal method (controller.ProfileController).Create address")
		}
		if body.Zip != serverRequest.Zip {
			t.Fatal("failed equal method (controller.ProfileController).Create zip")
		}
		w.WriteHeader(400)
		data, _ := json.Marshal(errorWrapper)
		w.Write(data)
	}))
	server := httptest.NewServer(mockServer)
	client := restservicechi.NewProfileControllerClient(server.URL, controller.ClientTestOptionFactory("Create_400")...)
	_, err := client.Create(serverRequest.FirstName, serverRequest.LastName, serverRequest.Address, serverRequest.Zip)
	if err == nil {
		t.Fatal("failed execute method (controller.ProfileController).Create error is nil")
	}
	var e *errors.DefaultError
	if errors1.As(err, &e) {
		if errorWrapper.Data != e.Data {
			t.Fatal("failed equal error field (controller.ProfileController).Create Data not equal")
		}
		if errorWrapper.ErrorText != e.ErrorText {
			t.Fatal("failed equal error field (controller.ProfileController).Create ErrorText not equal")
		}
		if errorWrapper.Code != e.Code {
			t.Fatal("failed equal error field (controller.ProfileController).Create Code not equal")
		}
	} else {
		t.Fatal("failed equal error (controller.ProfileController).Create not equal")
	}
}
func TestProfileController_DownloadFile_200(t *testing.T) {
	var idPath string = "ipsum hic doloremque sit repellendus maxime labore adipisci corporis voluptatem."
	var onlyCloudQuery bool = true
	mockServer := http.NewServeMux()
	mockServer.Handle("/profiles/{id}/file", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		if idPath != r.PathValue("id") {
			t.Fatal("failed equal method (controller.ProfileController).DownloadFile id")
		}

		onlyCloud, err := gostrings.ParseBool[bool](q.Get("onlyCloud"))
		if err != nil {
			t.Fatal(err)
		}
		if onlyCloudQuery != onlyCloud {
			t.Fatal("failed equal method (controller.ProfileController).DownloadFile onlyCloud")
		}
		w.WriteHeader(200)
		data, _ := json.Marshal(serverResponse)
		w.Write(data)
	}))
	server := httptest.NewServer(mockServer)
	client := restservicechi.NewProfileControllerClient(server.URL, controller.ClientTestOptionFactory("DownloadFile_200")...)
	data, err := client.DownloadFile(idPath, onlyCloudQuery)
	if err != nil {
		t.Fatalf("%s: %s", "failed execute method (controller.ProfileController).DownloadFile", err)
	}
}
func TestProfileController_DownloadFile_400(t *testing.T) {
	var idPath string = "aliquid modi fugiat voluptate omnis quibusdam aspernatur incidunt voluptatem iusto."
	var onlyCloudQuery bool = true
	errorWrapper := errors.ErrorWrapper{Data: nil, ErrorText: "dolor maxime voluptates assumenda dolores sequi nostrum consequatur sit velit.", Code: "ut est ut amet eum ipsam at et quis ut."}
	mockServer := http.NewServeMux()
	mockServer.Handle("/profiles/{id}/file", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		if idPath != r.PathValue("id") {
			t.Fatal("failed equal method (controller.ProfileController).DownloadFile id")
		}

		onlyCloud, err := gostrings.ParseBool[bool](q.Get("onlyCloud"))
		if err != nil {
			t.Fatal(err)
		}
		if onlyCloudQuery != onlyCloud {
			t.Fatal("failed equal method (controller.ProfileController).DownloadFile onlyCloud")
		}
		w.WriteHeader(400)
		data, _ := json.Marshal(errorWrapper)
		w.Write(data)
	}))
	server := httptest.NewServer(mockServer)
	client := restservicechi.NewProfileControllerClient(server.URL, controller.ClientTestOptionFactory("DownloadFile_400")...)
	_, err := client.DownloadFile(idPath, onlyCloudQuery)
	if err == nil {
		t.Fatal("failed execute method (controller.ProfileController).DownloadFile error is nil")
	}
	var e *errors.DefaultError
	if errors1.As(err, &e) {
		if errorWrapper.Data != e.Data {
			t.Fatal("failed equal error field (controller.ProfileController).DownloadFile Data not equal")
		}
		if errorWrapper.ErrorText != e.ErrorText {
			t.Fatal("failed equal error field (controller.ProfileController).DownloadFile ErrorText not equal")
		}
		if errorWrapper.Code != e.Code {
			t.Fatal("failed equal error field (controller.ProfileController).DownloadFile Code not equal")
		}
	} else {
		t.Fatal("failed equal error (controller.ProfileController).DownloadFile not equal")
	}
}
func TestProfileController_Remove_200(t *testing.T) {
	var idPath string = "quia laudantium ipsum reprehenderit quia quaerat molestiae accusamus a ipsa."
	mockServer := http.NewServeMux()
	mockServer.Handle("/profiles/{id}", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if idPath != r.PathValue("id") {
			t.Fatal("failed equal method (controller.ProfileController).Remove id")
		}
		w.WriteHeader(200)
	}))
	server := httptest.NewServer(mockServer)
	client := restservicechi.NewProfileControllerClient(server.URL, controller.ClientTestOptionFactory("Remove_200")...)
	err := client.Remove(idPath)
	if err != nil {
		t.Fatalf("%s: %s", "failed execute method (controller.ProfileController).Remove", err)
	}
}
func TestProfileController_Remove_400(t *testing.T) {
	var idPath string = "quod praesentium ut est reiciendis ut libero ex repellendus architecto."
	errorWrapper := errors.ErrorWrapper{Data: nil, ErrorText: "et blanditiis laudantium sunt rerum recusandae aut voluptate aperiam necessitatibus.", Code: "fuga soluta veniam suscipit voluptatum occaecati quis sequi quia iste."}
	mockServer := http.NewServeMux()
	mockServer.Handle("/profiles/{id}", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if idPath != r.PathValue("id") {
			t.Fatal("failed equal method (controller.ProfileController).Remove id")
		}
		w.WriteHeader(400)
		data, _ := json.Marshal(errorWrapper)
		w.Write(data)
	}))
	server := httptest.NewServer(mockServer)
	client := restservicechi.NewProfileControllerClient(server.URL, controller.ClientTestOptionFactory("Remove_400")...)
	err := client.Remove(idPath)
	if err == nil {
		t.Fatal("failed execute method (controller.ProfileController).Remove error is nil")
	}
	var e *errors.DefaultError
	if errors1.As(err, &e) {
		if errorWrapper.Data != e.Data {
			t.Fatal("failed equal error field (controller.ProfileController).Remove Data not equal")
		}
		if errorWrapper.ErrorText != e.ErrorText {
			t.Fatal("failed equal error field (controller.ProfileController).Remove ErrorText not equal")
		}
		if errorWrapper.Code != e.Code {
			t.Fatal("failed equal error field (controller.ProfileController).Remove Code not equal")
		}
	} else {
		t.Fatal("failed equal error (controller.ProfileController).Remove not equal")
	}
}
