// Code generated by GG version dev. DO NOT EDIT.

//go:build !gg

package server

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	controller "github.com/555f/gg/examples/rest-service-chi/internal/usecase/controller"
	dto "github.com/555f/gg/examples/rest-service-chi/pkg/dto"
	errors "github.com/555f/gg/examples/rest-service-chi/pkg/errors"
	gostrings "github.com/555f/go-strings"
	v5 "github.com/go-chi/chi/v5"
	"io"
	"net/http"
	"strings"
)

func chiDefaultErrorEncoder(w http.ResponseWriter, err error) {
	var statusCode int = http.StatusInternalServerError
	if e, ok := err.(interface {
		StatusCode() int
	}); ok {
		statusCode = e.StatusCode()
	}
	if headerer, ok := err.(interface {
		Headers() http.Header
	}); ok {
		for k, values := range headerer.Headers() {
			for _, v := range values {
				w.Header().Set(k, v)
			}
		}
	}
	errorWrapper := errors.ErrorWrapper{}
	if e, ok := err.(interface {
		Data() interface{}
	}); ok {
		errorWrapper.Data = e.Data()
	}
	if e, ok := err.(interface {
		Error() string
	}); ok {
		errorWrapper.ErrorText = e.Error()
	}
	if e, ok := err.(interface {
		Code() string
	}); ok {
		errorWrapper.Code = e.Code()
	}

	w.Header().Set("content-type", "application/json")
	w.WriteHeader(statusCode)
	bytes, err := json.Marshal(errorWrapper)
	if err != nil {
		w.WriteHeader(500)
		w.Write([]byte(err.Error()))
		return
	}
	w.Write(bytes)
}
func encodeBody(rw http.ResponseWriter, data any) {}

type ProfileControllerOption func(*ProfileControllerOptions)
type ProfileControllerOptions struct {
	errorEncoder           func(w http.ResponseWriter, err error)
	middleware             []func(http.Handler) http.Handler
	middlewareCreate       []func(http.Handler) http.Handler
	middlewareDownloadFile []func(http.Handler) http.Handler
	middlewareRemove       []func(http.Handler) http.Handler
}

func ProfileControllerMiddleware(middleware ...func(http.Handler) http.Handler) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middleware = append(o.middleware, middleware...)
	}
}
func ProfileControllerWithErrorEncoder(errorEncoder func(w http.ResponseWriter, err error)) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.errorEncoder = errorEncoder
	}
}
func ProfileControllerCreateMiddleware(middleware ...func(http.Handler) http.Handler) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareCreate = append(o.middlewareCreate, middleware...)
	}
}
func ProfileControllerDownloadFileMiddleware(middleware ...func(http.Handler) http.Handler) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareDownloadFile = append(o.middlewareDownloadFile, middleware...)
	}
}
func ProfileControllerRemoveMiddleware(middleware ...func(http.Handler) http.Handler) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareRemove = append(o.middlewareRemove, middleware...)
	}
}
func SetupRoutesProfileController(svc controller.ProfileController, r v5.Router, opts ...ProfileControllerOption) {
	o := &ProfileControllerOptions{errorEncoder: chiDefaultErrorEncoder}
	for _, opt := range opts {
		opt(o)
	}
	r.With(append(o.middleware, o.middlewareCreate...)...).Method("POST", "/profiles", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var err error
		var req struct {
			XMLName   xml.Name `xml:"profile"`
			FirstName string   `json:"firstName"`
			LastName  string   `json:"lastName"`
			Address   string   `json:"address"`
			Zip       int      `json:"zip"`
		}
		var bodyData = make([]byte, 0, 10485760)
		buf := bytes.NewBuffer(bodyData)
		written, err := io.Copy(buf, r.Body)
		if err != nil {
			o.errorEncoder(w, err)
			return
		}
		contentTypeHeaderParam := r.Header.Get("content-type")
		parts := strings.Split(contentTypeHeaderParam, ";")
		if len(parts) > 0 {
			contentTypeHeaderParam = parts[0]
		}
		switch contentTypeHeaderParam {
		default:
			err = json.Unmarshal(bodyData[:written], &req)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		case "application/xml":
			err = xml.Unmarshal(bodyData[:written], &req)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		case "application/x-www-form-urlencoded":
			err = r.ParseForm()
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
			req.FirstName = r.Form.Get("firstName")
			req.LastName = r.Form.Get("lastName")
			req.Address = r.Form.Get("address")
			req.Zip, err = gostrings.ParseInt[int](r.Form.Get("zip"), 10, 64)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		case "multipart/form-data":
			err = r.ParseMultipartForm(int64(67108864))
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
			req.FirstName = r.FormValue("firstName")
			req.LastName = r.FormValue("lastName")
			req.Address = r.FormValue("address")
			req.Zip, err = gostrings.ParseInt[int](r.FormValue("zip"), 10, 64)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		}
		profile, err := svc.Create(req.FirstName, req.LastName, req.Address, req.Zip)
		if err != nil {
			o.errorEncoder(w, err)
			return
		}
		var resp struct {
			Profile *dto.Profile `json:"profile"`
		}
		resp.Profile = profile
		var respData []byte
		acceptHeaderParam := r.Header.Get("accept")
		switch acceptHeaderParam {
		default:
			acceptHeaderParam = "application/json"
			respData, err = json.Marshal(resp)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		case "application/xml":
			respData, err = xml.Marshal(resp)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		}

		w.Header().Set("content-type", acceptHeaderParam)
		w.WriteHeader(200)
		w.Write(respData)
		return
	}))
	r.With(append(o.middleware, o.middlewareDownloadFile...)...).Method("GET", "/profiles/:id/file", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var err error
		idPathParam := v5.URLParam(r, "id")
		var paramid string
		if idPathParam != "" {
			paramid = idPathParam
		}
		q := r.URL.Query()
		onlyCloudQueryParam := q.Get("onlyCloud")
		var paramonlyCloud bool
		if onlyCloudQueryParam != "" {
			paramonlyCloud, err = gostrings.ParseBool(onlyCloudQueryParam)
			if err != nil {
				o.errorEncoder(w, err)
				return
			}
		}
		data, err := svc.DownloadFile(paramid, paramonlyCloud)
		if err != nil {
			o.errorEncoder(w, err)
			return
		}
		var resp struct {
			Data string `json:"data"`
		}
		resp.Data = data
		var respData []byte
		respData, err = json.Marshal(resp)
		if err != nil {
			o.errorEncoder(w, err)
			return
		}

		w.Header().Set("content-type", "application/json")
		w.WriteHeader(200)
		w.Write(respData)
		return
	}))
	r.With(append(o.middleware, o.middlewareRemove...)...).Method("DELETE", "/profiles/:id", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var err error
		idPathParam := v5.URLParam(r, "id")
		var paramid string
		if idPathParam != "" {
			paramid = idPathParam
		}
		err = svc.Remove(paramid)
		if err != nil {
			o.errorEncoder(w, err)
			return
		}
		return
	}))
}
