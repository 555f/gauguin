// Code generated by GG version dev. DO NOT EDIT.

package client

import (
	"context"
	"encoding/json"
	dto "github.com/555f/gg/examples/jsonrpc-service/pkg/dto"
	jsonrpc "github.com/555f/jsonrpc"
)

type ProfileControllerClient struct {
	*jsonrpc.Client
}
type ProfileControllerCreateRequest struct {
	c      *ProfileControllerClient
	params struct {
		token     *string
		firstName *string
		lastName  *string
		address   *string
	}
	before []jsonrpc.ClientBeforeFunc
	after  []jsonrpc.ClientAfterFunc
}

func (create *ProfileControllerCreateRequest) Before() []jsonrpc.ClientBeforeFunc {
	return create.before
}
func (create *ProfileControllerCreateRequest) SetBefore(before ...jsonrpc.ClientBeforeFunc) *ProfileControllerCreateRequest {
	create.before = before
	return create
}
func (create *ProfileControllerCreateRequest) After() []jsonrpc.ClientAfterFunc {
	return create.after
}
func (create *ProfileControllerCreateRequest) SetAfter(after ...jsonrpc.ClientAfterFunc) *ProfileControllerCreateRequest {
	create.after = after
	return create
}

type ProfileControllerCreateBatchResult struct {
	Profile *dto.Profile `json:"profile"`
}

func (create *ProfileControllerCreateRequest) SetToken(token string) *ProfileControllerCreateRequest {
	create.params.token = &token
	return create
}
func (create *ProfileControllerCreateRequest) SetFirstName(firstName string) *ProfileControllerCreateRequest {
	create.params.firstName = &firstName
	return create
}
func (create *ProfileControllerCreateRequest) SetLastName(lastName string) *ProfileControllerCreateRequest {
	create.params.lastName = &lastName
	return create
}
func (create *ProfileControllerCreateRequest) SetAddress(address string) *ProfileControllerCreateRequest {
	create.params.address = &address
	return create
}
func (profileController *ProfileControllerClient) Create() *ProfileControllerCreateRequest {
	r := &ProfileControllerCreateRequest{c: profileController}
	return r
}
func (create *ProfileControllerCreateRequest) MakeRequest() (string, any) {
	var params struct {
		Token     *string `json:"token,omitempty"`
		FirstName *string `json:"firstName,omitempty"`
		LastName  *string `json:"lastName,omitempty"`
		Address   *string `json:"address,omitempty"`
	}
	params.Token = create.params.token
	params.FirstName = create.params.firstName
	params.LastName = create.params.lastName
	params.Address = create.params.address
	return "profile.create", params
}
func (create *ProfileControllerCreateRequest) MakeResult(data []byte) (any, error) {
	var result ProfileControllerCreateBatchResult
	if err := json.Unmarshal(data, &result); err != nil {
		return nil, err
	}
	return result, nil
}
func (create *ProfileControllerCreateRequest) Execute() (profile *dto.Profile, err error) {
	return create.ExecuteWithContext(context.TODO())
}
func (create *ProfileControllerCreateRequest) ExecuteWithContext(ctx context.Context) (profile *dto.Profile, err error) {
	batchResult, err := create.c.Client.ExecuteWithContext(ctx, create)
	if err != nil {
		return
	}
	err = batchResult.Error(0)
	if err != nil {
		return
	}
	clientResult := batchResult.At(0).(ProfileControllerCreateBatchResult)
	return clientResult.Profile, err
}

type ProfileControllerRemoveRequest struct {
	c      *ProfileControllerClient
	params struct {
		id *string
	}
	before []jsonrpc.ClientBeforeFunc
	after  []jsonrpc.ClientAfterFunc
}

func (remove *ProfileControllerRemoveRequest) Before() []jsonrpc.ClientBeforeFunc {
	return remove.before
}
func (remove *ProfileControllerRemoveRequest) SetBefore(before ...jsonrpc.ClientBeforeFunc) *ProfileControllerRemoveRequest {
	remove.before = before
	return remove
}
func (remove *ProfileControllerRemoveRequest) After() []jsonrpc.ClientAfterFunc {
	return remove.after
}
func (remove *ProfileControllerRemoveRequest) SetAfter(after ...jsonrpc.ClientAfterFunc) *ProfileControllerRemoveRequest {
	remove.after = after
	return remove
}
func (remove *ProfileControllerRemoveRequest) SetId(id string) *ProfileControllerRemoveRequest {
	remove.params.id = &id
	return remove
}
func (profileController *ProfileControllerClient) Remove() *ProfileControllerRemoveRequest {
	r := &ProfileControllerRemoveRequest{c: profileController}
	return r
}
func (remove *ProfileControllerRemoveRequest) MakeRequest() (string, any) {
	var params struct {
		Id *string `json:"id,omitempty"`
	}
	params.Id = remove.params.id
	return "profile.delete", params
}
func (remove *ProfileControllerRemoveRequest) MakeResult(data []byte) (any, error) {
	return nil, nil
}
func (remove *ProfileControllerRemoveRequest) Execute() (err error) {
	return remove.ExecuteWithContext(context.TODO())
}
func (remove *ProfileControllerRemoveRequest) ExecuteWithContext(ctx context.Context) (err error) {
	batchResult, err := remove.c.Client.ExecuteWithContext(ctx, remove)
	if err != nil {
		return
	}
	err = batchResult.Error(0)
	if err != nil {
		return
	}
	return err
}
func NewProfileControllerClient(target string, opts ...jsonrpc.ClientOption) *ProfileControllerClient {
	return &ProfileControllerClient{Client: jsonrpc.NewClient(target, opts...)}
}
