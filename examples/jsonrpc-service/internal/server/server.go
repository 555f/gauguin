// Code generated by GG version dev. DO NOT EDIT.

package server

import (
	"context"
	"encoding/json"
	controller "github.com/555f/gg/examples/jsonrpc-service/internal/usecase/controller"
	dto "github.com/555f/gg/examples/jsonrpc-service/pkg/dto"
	jsonrpc "github.com/555f/jsonrpc"
	"net/http"
)

type ProfileControllerOption func(*ProfileControllerOptions)
type ProfileControllerOptions struct {
	middleware       []jsonrpc.Option
	middlewareCreate []jsonrpc.Option
	middlewareRemove []jsonrpc.Option
}

func ProfileControllerMiddleware(middleware ...jsonrpc.Option) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middleware = append(o.middleware, middleware...)
	}
}
func ProfileControllerCreateMiddleware(middleware ...jsonrpc.Option) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareCreate = append(o.middlewareCreate, middleware...)
	}
}
func ProfileControllerRemoveMiddleware(middleware ...jsonrpc.Option) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareRemove = append(o.middlewareRemove, middleware...)
	}
}
func SetupRoutesProfileController(svc controller.ProfileController, r *jsonrpc.Server, opts ...ProfileControllerOption) {
	o := &ProfileControllerOptions{}
	for _, opt := range opts {
		opt(o)
	}
	r.Register("profile.create", profileControllerCreateEndpoint(svc), func(ctx context.Context, r *http.Request, params json.RawMessage) (req any, err error) {

		req, err = profileControllerCreateReqDec(params)
		if err != nil {
			return
		}
		return
	}, append(o.middleware, o.middlewareCreate...)...)
	r.Register("profile.delete", profileControllerRemoveEndpoint(svc), func(ctx context.Context, r *http.Request, params json.RawMessage) (req any, err error) {

		req, err = profileControllerRemoveReqDec(params)
		if err != nil {
			return
		}
		return
	}, append(o.middleware, o.middlewareRemove...)...)
}

type profileControllerCreateReq struct {
	Token     string `json:"token"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Address   string `json:"address"`
}

func profileControllerCreateReqDec(params json.RawMessage) (req any, err error) {
	var param profileControllerCreateReq
	err = json.Unmarshal(params, &param)
	if err != nil {
		return nil, err
	}
	return &param, nil
}

type profileControllerCreateResp struct {
	Profile *dto.Profile `json:"profile"`
}

func profileControllerCreateEndpoint(svc controller.ProfileController) func(ctx context.Context, request any) (any, error) {
	return func(ctx context.Context, request any) (any, error) {
		r := request.(*profileControllerCreateReq)
		profile, err := svc.Create(r.Token, r.FirstName, r.LastName, r.Address)
		if err != nil {
			return nil, err
		}
		return &profileControllerCreateResp{Profile: profile}, nil
	}
}

type profileControllerRemoveReq struct {
	Id string `json:"id"`
}

func profileControllerRemoveReqDec(params json.RawMessage) (req any, err error) {
	var param profileControllerRemoveReq
	err = json.Unmarshal(params, &param.Id)
	if err != nil {
		return nil, err
	}
	return &param, nil
}
func profileControllerRemoveEndpoint(svc controller.ProfileController) func(ctx context.Context, request any) (any, error) {
	return func(ctx context.Context, request any) (any, error) {
		r := request.(*profileControllerRemoveReq)
		err := svc.Remove(r.Id)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}
}
