// Code generated by GG version dev. DO NOT EDIT.

//go:build !gg
// +build !gg

package server

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	controller "github.com/555f/gg/examples/rest-service/internal/usecase/controller"
	dto "github.com/555f/gg/examples/rest-service/pkg/dto"
	errors "github.com/555f/gg/examples/rest-service/pkg/errors"
	gostrings "github.com/555f/go-strings"
	v4 "github.com/labstack/echo/v4"
	"io"
	"net/http"
	"strings"
)

func echoDefaultErrorEncoder(ctx v4.Context, err error) {
	var statusCode int = http.StatusInternalServerError
	if e, ok := err.(interface {
		StatusCode() int
	}); ok {
		statusCode = e.StatusCode()
	}
	if headerer, ok := err.(interface {
		Headers() http.Header
	}); ok {
		for k, values := range headerer.Headers() {
			for _, v := range values {
				ctx.Response().Header().Add(k, v)
			}
		}
	}
	errorWrapper := errors.ErrorWrapper{}
	if e, ok := err.(interface {
		Data() interface{}
	}); ok {
		errorWrapper.Data = e.Data()
	}
	if e, ok := err.(interface {
		Error() string
	}); ok {
		errorWrapper.ErrorText = e.Error()
	}
	if e, ok := err.(interface {
		Code() string
	}); ok {
		errorWrapper.Code = e.Code()
	}

	err = ctx.JSON(statusCode, err)
	if err != nil {
		ctx.Response().Header().Add("content-type", "text/plain")
		ctx.Response().WriteHeader(500)
		ctx.Response().Write([]byte(err.Error()))
	}
}

type contentTypeInvalidError struct{}

func (*contentTypeInvalidError) Error() string {
	return "Unsupported Media Type"
}
func (*contentTypeInvalidError) StatusCode() int {
	return 415
}

type profileControllerCreateReq struct {
	XMLName   xml.Name `xml:"profile"`
	FirstName string   `json:"firstName"`
	LastName  string   `json:"lastName"`
	Address   string   `json:"address"`
	Zip       int      `json:"zip"`
}

func profileControllerCreateReqDec(ctx v4.Context) (result any, err error) {
	var param profileControllerCreateReq
	contentTypeHeaderParam := ctx.Request().Header.Get("content-type")
	parts := strings.Split(contentTypeHeaderParam, ";")
	if len(parts) == 0 {
		return nil, err
	}
	contentTypeHeaderParam = parts[0]
	var bodyData = make([]byte, 0, 10485760)
	buf := bytes.NewBuffer(bodyData)
	written, err := io.Copy(buf, ctx.Request().Body)
	if err != nil {
		return
	}
	switch contentTypeHeaderParam {
	default:
		return nil, &contentTypeInvalidError{}
	case "application/json":
		err = json.Unmarshal(bodyData[:written], &param)
		if err != nil {
			return nil, err
		}
	case "application/xml":
		err = xml.Unmarshal(bodyData[:written], &param)
		if err != nil {
			return nil, err
		}
	case "application/x-www-form-urlencoded":

		f, err := ctx.FormParams()
		if err != nil {
			return nil, err
		}
		firstNameFormParam := f.Get("firstName")
		param.FirstName = firstNameFormParam
		lastNameFormParam := f.Get("lastName")
		param.LastName = lastNameFormParam
		addressFormParam := f.Get("address")
		param.Address = addressFormParam
		zipFormParam := f.Get("zip")
		param.Zip, err = gostrings.ParseInt[int](zipFormParam, 10, 64)
		if err != nil {
			return nil, err
		}
	case "multipart/form-data":

		f, err := ctx.FormParams()
		if err != nil {
			return nil, err
		}
		firstNameMpFormParam := f.Get("firstName")
		param.FirstName = firstNameMpFormParam
		lastNameMpFormParam := f.Get("lastName")
		param.LastName = lastNameMpFormParam
		addressMpFormParam := f.Get("address")
		param.Address = addressMpFormParam
		zipMpFormParam := f.Get("zip")
		param.Zip, err = gostrings.ParseInt[int](zipMpFormParam, 10, 64)
		if err != nil {
			return nil, err
		}
	}
	return &param, nil
}

type profileControllerCreateResp struct {
	Profile *dto.Profile `json:"profile"`
}

func profileControllerCreateRespEnc(result any) (any, error) {
	var wrapResult struct {
		Profile *dto.Profile `json:"profile"`
	}
	wrapResult.Profile = result.(*profileControllerCreateResp).Profile
	result = wrapResult
	return result, nil
}
func profileControllerCreateEndpoint(svc controller.ProfileController) func(ctx context.Context, request any) (any, error) {
	return func(ctx context.Context, request any) (any, error) {
		r := request.(*profileControllerCreateReq)
		profile, err := svc.Create(r.FirstName, r.LastName, r.Address, r.Zip)
		if err != nil {
			return nil, err
		}
		return &profileControllerCreateResp{Profile: profile}, nil
	}
}

type profileControllerDownloadFileReq struct {
	Id string `json:"-"`
}

func profileControllerDownloadFileReqDec(ctx v4.Context) (result any, err error) {
	var param profileControllerDownloadFileReq
	idPathParam := ctx.Param("id")
	if idPathParam != "" {
		param.Id = idPathParam
		if err != nil {
			return
		}
	}
	return &param, nil
}

type profileControllerDownloadFileResp struct {
	Data string `json:"data"`
}

func profileControllerDownloadFileRespEnc(result any) (any, error) {
	var wrapResult struct {
		Data string `json:"data"`
	}
	wrapResult.Data = result.(*profileControllerDownloadFileResp).Data
	result = wrapResult
	return result, nil
}
func profileControllerDownloadFileEndpoint(svc controller.ProfileController) func(ctx context.Context, request any) (any, error) {
	return func(ctx context.Context, request any) (any, error) {
		r := request.(*profileControllerDownloadFileReq)
		data, err := svc.DownloadFile(r.Id)
		if err != nil {
			return nil, err
		}
		return &profileControllerDownloadFileResp{Data: data}, nil
	}
}

type profileControllerRemoveReq struct {
	Id string `json:"id"`
}

func profileControllerRemoveReqDec(ctx v4.Context) (result any, err error) {
	var param profileControllerRemoveReq
	contentTypeHeaderParam := ctx.Request().Header.Get("content-type")
	parts := strings.Split(contentTypeHeaderParam, ";")
	if len(parts) == 0 {
		return nil, err
	}
	contentTypeHeaderParam = parts[0]
	var bodyData = make([]byte, 0, 10485760)
	buf := bytes.NewBuffer(bodyData)
	written, err := io.Copy(buf, ctx.Request().Body)
	if err != nil {
		return
	}
	switch contentTypeHeaderParam {
	default:
		return nil, &contentTypeInvalidError{}
	case "application/json":
		err = json.Unmarshal(bodyData[:written], &param)
		if err != nil {
			return nil, err
		}
	}
	return &param, nil
}
func profileControllerRemoveEndpoint(svc controller.ProfileController) func(ctx context.Context, request any) (any, error) {
	return func(ctx context.Context, request any) (any, error) {
		r := request.(*profileControllerRemoveReq)
		err := svc.Remove(r.Id)
		if err != nil {
			return nil, err
		}
		return nil, nil
	}
}

type ProfileControllerOption func(*ProfileControllerOptions)
type ProfileControllerOptions struct {
	errorEncoder           func(ctx v4.Context, err error)
	middleware             []v4.MiddlewareFunc
	middlewareCreate       []v4.MiddlewareFunc
	middlewareDownloadFile []v4.MiddlewareFunc
	middlewareRemove       []v4.MiddlewareFunc
}

func ProfileControllerMiddleware(middleware ...v4.MiddlewareFunc) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middleware = append(o.middleware, middleware...)
	}
}
func ProfileControllerWithErrorEncoder(errorEncoder func(ctx v4.Context, err error)) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.errorEncoder = errorEncoder
	}
}
func ProfileControllerCreateMiddleware(middleware ...v4.MiddlewareFunc) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareCreate = append(o.middlewareCreate, middleware...)
	}
}
func ProfileControllerDownloadFileMiddleware(middleware ...v4.MiddlewareFunc) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareDownloadFile = append(o.middlewareDownloadFile, middleware...)
	}
}
func ProfileControllerRemoveMiddleware(middleware ...v4.MiddlewareFunc) ProfileControllerOption {
	return func(o *ProfileControllerOptions) {
		o.middlewareRemove = append(o.middlewareRemove, middleware...)
	}
}

func SetupRoutesProfileController(svc controller.ProfileController, e *v4.Echo, opts ...ProfileControllerOption) {
	o := &ProfileControllerOptions{errorEncoder: echoDefaultErrorEncoder}
	for _, opt := range opts {
		opt(o)
	}
	e.Add("POST", "/profiles", func(ctx v4.Context) (_ error) {

		reqCtx := context.TODO()
		req, err := profileControllerCreateReqDec(ctx)
		if err != nil {
			return
		}
		resp, err := profileControllerCreateEndpoint(svc)(reqCtx, req)
		if err != nil {
			o.errorEncoder(ctx, err)
			return
		}
		result, err := profileControllerCreateRespEnc(resp)
		if err != nil {
			o.errorEncoder(ctx, err)
			return
		}
		err = ctx.JSON(200, result)
		if err != nil {
			ctx.Response().Header().Add("content-type", "text/plain")
			ctx.Response().WriteHeader(500)
			ctx.Response().Write([]byte(err.Error()))
			return
		}
		return nil
	}, append(o.middleware, o.middlewareCreate...)...)
	e.Add("GET", "/profiles/:id/file", func(ctx v4.Context) (_ error) {

		reqCtx := context.TODO()
		req, err := profileControllerDownloadFileReqDec(ctx)
		if err != nil {
			return
		}
		resp, err := profileControllerDownloadFileEndpoint(svc)(reqCtx, req)
		if err != nil {
			o.errorEncoder(ctx, err)
			return
		}
		result, err := profileControllerDownloadFileRespEnc(resp)
		if err != nil {
			o.errorEncoder(ctx, err)
			return
		}
		err = ctx.JSON(200, result)
		if err != nil {
			ctx.Response().Header().Add("content-type", "text/plain")
			ctx.Response().WriteHeader(500)
			ctx.Response().Write([]byte(err.Error()))
			return
		}
		return nil
	}, append(o.middleware, o.middlewareDownloadFile...)...)
	e.Add("DELETE", "/profiles/{id}", func(ctx v4.Context) (_ error) {

		reqCtx := context.TODO()
		req, err := profileControllerRemoveReqDec(ctx)
		if err != nil {
			return
		}
		_, err = profileControllerRemoveEndpoint(svc)(reqCtx, req)
		if err != nil {
			o.errorEncoder(ctx, err)
			return
		}
		return nil
	}, append(o.middleware, o.middlewareRemove...)...)
}
